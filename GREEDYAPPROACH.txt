Greedy approach 1:
Chef has gone shopping with his 5-year old son. They have bought N items
so far. The items are numbered from 1 to N, and the item i weighs Wi grams.
Chef's son insists on helping his father in carrying the items. He wants his
dad to give him a few items. Chef does not want to burden his son. But he
won't stop bothering him unless he is given a few items to carry. So Chef
decides to give him some items. Obviously, Chef wants to give the kid less
weight to carry.
However, his son is a smart kid. To avoid being given the bare minimum
weight to carry, he suggests that the items are split into two groups, and
one group contains exactly K items. Then Chef will carry the heavier group,
and his son will carry the other group.
Help the Chef in deciding which items should the son take. Your task will be
simple. Tell the Chef the maximum possible difference between the weight
carried by him and the weight carried by the kid.
CODE:
import java.util.*;
public class Main{
public static void main(String[] args){
Scanner in= new Scanner(System.in);
System.out.print("Enter number of items: ");
int N=in.nextInt();
int W[]=new int[N];
System.out.print("Enter item weights: ");
for(int i=0;i<W.length;i++){
W[i]=in.nextInt();
}
System.out.print("Enter number of items in one of the group: ");
int K=in.nextInt();
Arrays.sort(W);
int n=W.length-1;
int group1_sum=0,group2_sum=0;
if(K<=n/2){
for(int i=0;i<K;i++){
group1_sum+=W[i];
}
for(int i=K;i<W.length;i++){
group2_sum+=W[i];
}
}else{
for(int i=W.length-1;i>=N-K;i--){
group1_sum+=W[i];
}
for(int i=N-K-1;i>=0;i--){
group2_sum+=W[i];
}
}
System.out.println("Maximum possible difference between the weight
carried by father and son = "+Math.abs(group1_sum-group2_sum));
}
}


Greedy approach 2:
You are given n activities with their start and finish times. Select the
maximum number of activities that can be performed by a single person,
assuming that a person can only work on a single activity at a time.
Example:
Consider the following 6 activities.
start[] = {1, 3, 0, 5, 8, 5};
finish[] = {2, 4, 6, 7, 9, 9};
The maximum set of activities that can be executed
by a single person is {0, 1, 3, 4}
The greedy choice is to always pick the next activity whose finish time is
least among the remaining activities and the start time is more than or
equal to the finish time of previously selected activity. We can sort the
activities according to their finishing time so that we always consider the
next activity as minimum finishing time activity.
1. Sort the activities according to their finishing time
2.Select the first activity from the sorted array and print it.
3. Do following for remaining activities in the sorted array.
…….a) If the start time of this activity is greater than the finish time of
previously selected activity then select this activity and print it.
import java.util.*;
import java.lang.*;
import java.io.*;
class Main
{
public static void printMaxActivities(int s[], int f[], int n)
{
int i, j;
System.out.print("Following activities are selected : ");
i = 0;
System.out.print(i+" ");
for (j = 1; j < n; j++)
{
if (s[j] >= f[i])
{
System.out.print(j+" ");
i = j;
}
}
}
public static void main(String[] args)
{
int s[] = {1, 3, 0, 5, 8, 5};
int f[] = {2, 4, 6, 7, 9, 9};
int n = s.length;
printMaxActivities(s, f, n);
}
}